apiVersion: v1
kind: Namespace
metadata:
  name: kuma-demo
  namespace: kuma-demo
  labels:
    kuma.io/sidecar-injection: enabled
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch
  namespace: kuma-demo
---
apiVersion: v1
kind: Service
metadata:
  namespace: kuma-demo
  name: elasticsearch
  labels:
    component: elasticsearch
spec:
  type: LoadBalancer
  selector:
    component: elasticsearch
  ports:
  - name: http
    port: 80
    targetPort: 9200
  type: ClusterIP
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: es
  namespace: kuma-demo
  labels:
    component: elasticsearch
spec:
  replicas: 1
  template:
    metadata:
      labels:
        component: elasticsearch
    spec:
      serviceAccount: elasticsearch
      initContainers:
      - name: init-sysctl
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: es
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        image: kvn0218/kuma-elastic-kubernetes:latest
        env:
        - name: KUBERNETES_CA_CERTIFICATE_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: "CLUSTER_NAME"
          value: "myesdb"
        - name: "DISCOVERY_SERVICE"
          value: "elasticsearch"
        - name: NODE_MASTER
          value: "true"
        - name: NODE_DATA
          value: "true"
        - name: HTTP_ENABLE
          value: "true"
        - name: NETWORK_HOST
          value: "0.0.0.0"          
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: storage
      volumes:
      - name: storage
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  namespace: kuma-demo
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: kvn0218/kuma-redis
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 150m
            memory: 256Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: kuma-demo
  labels:
    app: redis
    role: master
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    role: master
    tier: backend
---
apiVersion: v1
kind: Service
metadata:
  name: kuma-demo-api
  namespace: kuma-demo
spec:
  selector:
    app: kuma-demo-api
  ports:
  - name: api
    port: 3001
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-app-config
  namespace: kuma-demo
data:
  nginx.conf: |
    user  nginx;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        access_log  /var/log/nginx/access.log  main;
        keepalive_timeout  65;
        upstream frontend {
            server localhost:8080;
        }
        upstream backend {
            server localhost:3001;
        }
        server {
            listen       80;
            server_name  localhost;
            location /items {
                proxy_pass http://backend;
            }
            location / {
                proxy_pass http://frontend;
            }
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-demo-app
  namespace: kuma-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kuma-demo-api
  template:
    metadata:
      labels:
        app: kuma-demo-api
    spec:
      containers:
      - image: nginx
        name: nginx
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        volumeMounts:
        - name: demo-app-config
          mountPath: /etc/nginx/
      - image: kvn0218/kuma-demo-be:lts
        name: kuma-be
        env:
        - name: ES_HOST
          value: http://elasticsearch:80
        - name: REDIS_HOST
          value: "redis-master"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
      - name: kuma-fe
        image: kvn0218/kuma-demo-fe:kubecon
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
      volumes:
      - name: demo-app-config
        configMap:
          name: demo-app-config
---
apiVersion: v1
kind: Namespace
metadata:
  name: kuma-example
  labels:
    kuma.io/sidecar-injection: enabled

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-app-config
  namespace: kuma-example
data:
  kong.yml: |
    _format_version: "1.1"

    services:
    - name: mockbin.org
      url: http://mockbin.org
      routes:
      - name: default
        paths:
        - /
---
apiVersion: v1
kind: Service
metadata:
  name: example-app
  namespace: kuma-example
spec:
  ports:
  - port: 8000
    name: http
  selector:
    app: example-app
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-app-service-account
  namespace: kuma-example
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  namespace: kuma-example
  labels:
    app: example-app
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: example-app
  template:
    metadata:
      labels:
        app: example-app
    spec:
      serviceAccountName: example-app-service-account
      containers:
      - name: example-app
        image: "kong:1.1.2-alpine"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        - name: KONG_ADMIN_LISTEN
          value: "off"
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_DECLARATIVE_CONFIG
          value: "/etc/kong/kong.yml"
        volumeMounts:
        - name: example-app-config
          mountPath: /etc/kong
        livenessProbe:
          exec:
            command:
            - curl
            - -s
            - http://localhost:8000
        readinessProbe:
          exec:
            command:
            - curl
            - -s
            - http://localhost:8000
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
      volumes:
      - name: example-app-config
        configMap:
          name: example-app-config

---
apiVersion: v1
kind: Service
metadata:
  name: example-client
  namespace: kuma-example
spec:
  ports:
  - port: 3000
    name: http
  selector:
    app: example-client
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-client-service-account
  namespace: kuma-example
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-client
  namespace: kuma-example
  labels:
    app: example-client
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: example-client
  template:
    metadata:
      labels:
        app: example-client
    spec:
      serviceAccountName: example-client-service-account
      containers:
      - name: example-client
        image: kong-docker-kuma-ci-docker.bintray.io/curl
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        command:
        - nc
        - -lk
        - -p
        - "3000"
        - -e
        - curl
        - --silent
        - --show-error
        - --include
        - --fail
        - http://example-app.kuma-example:8000/request
        resources:
          requests:
            cpu: 10m
            memory: 16Mi

# Example setup to verify TrafficRoute
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: kuma-example
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: backend

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: backend
    version: v1
  name: backend-v1
  namespace: kuma-example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
        version: v1
        env: prod
    spec:
      containers:
      - args:
        - nc
        - -lk
        - -s
        - 127.0.0.1 
        - -p
        - "8080"
        - -e
        - echo
        - -e
        - 'HTTP/1.1 200 OK\r\nContent-Length: 17\r\n\r\n{"version":"v1"}\n'
        ports:
        - containerPort: 8080
        image: busybox
        imagePullPolicy: Always
        name: app
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: backend
    version: v2
  name: backend-v2
  namespace: kuma-example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v2
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
        version: v2
        env: intg
    spec:
      containers:
      - args:
        - nc
        - -lk
        - -s
        - 127.0.0.1
        - -p
        - "8080"
        - -e
        - echo
        - -e
        - 'HTTP/1.1 200 OK\r\nContent-Length: 17\r\n\r\n{"version":"v2"}\n'
        ports:
        - containerPort: 8080
        image: busybox
        imagePullPolicy: Always
        name: app

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: backend
    version: v3
  name: backend-v3
  namespace: kuma-example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v3
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
        version: v3
        env: dev
    spec:
      containers:
      - args:
        - nc
        - -lk
        - -s
        - 127.0.0.1
        - -p
        - "8080"
        - -e
        - echo
        - -e
        - 'HTTP/1.1 200 OK\r\nContent-Length: 17\r\n\r\n{"version":"v3"}\n'
        ports:
        - containerPort: 8080
        image: busybox
        imagePullPolicy: Always
        name: app

---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: kuma-example
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: kuma-example
  labels:
    app: web
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
        version: v2
        env: prod 
    spec:
      containers:
      - name: web
        image: kong-docker-kuma-ci-docker.bintray.io/curl
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        command:
        - nc
        - -lk
        - -p
        - "8080"
        - -e
        - curl
        - --silent
        - --show-error
        - --include
        - --fail
        - http://backend.kuma-example:8080/request
        resources:
          requests:
            cpu: 10m
            memory: 16Mi